--------------------
./configure
2017年10月20日 星期五 10时25分55秒 CST
=== ztest45646.c ===
extern int getchar();
int hello() {return getchar();}
===
cc -c ztest45646.c
... using gcc

Checking for obsessive-compulsive compiler options...
=== ztest45646.c ===
int foo() { return 0; }
===
cc -c -O2 -pipe ztest45646.c

Checking for shared library support...
=== ztest45646.c ===
extern int getchar();
int hello() {return getchar();}
===
cc -w -c -O2 -pipe -fPIC ztest45646.c
cc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.11 -O2 -pipe -fPIC -o ztest45646.dylib ztest45646.o
Building shared library libz.1.2.11.dylib with cc.

=== ztest45646.c ===
#include <stdio.h>
#include <stdlib.h>
size_t dummy = 0;
===
cc -c -O2 -pipe ztest45646.c
Checking for size_t... Yes.


=== ztest45646.c ===
#include <sys/types.h>
off64_t dummy = 0;
===
cc -c -O2 -pipe -D_LARGEFILE64_SOURCE=1 ztest45646.c
ztest45646.c:2:1: error: unknown type name 'off64_t'; did you mean 'off_t'?
off64_t dummy = 0;
^~~~~~~
off_t
/usr/include/sys/_types/_off_t.h:30:25: note: 'off_t' declared here
typedef __darwin_off_t          off_t;
                                ^
1 error generated.
(exit code 1)
Checking for off64_t... No.

=== ztest45646.c ===
#include <stdio.h>
int main(void) {
  fseeko(NULL, 0, 0);
  return 0;
}
===
cc -O2 -pipe -o ztest45646 ztest45646.c
Checking for fseeko... Yes.

=== ztest45646.c ===
#include <string.h>
#include <errno.h>
int main() { return strlen(strerror(errno)); }
===
cc -O2 -pipe -o ztest45646 ztest45646.c
Checking for strerror... Yes.

=== ztest45646.c ===
#include <unistd.h>
int main() { return 0; }
===
cc -c -O2 -pipe ztest45646.c
Checking for unistd.h... Yes.

=== ztest45646.c ===
#include <stdarg.h>
int main() { return 0; }
===
cc -c -O2 -pipe ztest45646.c
Checking for stdarg.h... Yes.

=== ztest45646.c ===
#include <stdio.h>
#include <stdarg.h>
#include "zconf.h"
int main()
{
#ifndef STDC
  choke me
#endif
  return 0;
}
===
cc -c -O2 -pipe ztest45646.c
Checking whether to use vs[n]printf() or s[n]printf()... using vs[n]printf().

=== ztest45646.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return 0;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
cc -O2 -pipe -o ztest45646 ztest45646.c
Checking for vsnprintf() in stdio.h... Yes.

=== ztest45646.c ===
#include <stdio.h>
#include <stdarg.h>
int mytest(const char *fmt, ...)
{
  int n;
  char buf[20];
  va_list ap;
  va_start(ap, fmt);
  n = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return n;
}
int main()
{
  return (mytest("Hello%d\n", 1));
}
===
cc -c -O2 -pipe ztest45646.c
Checking for return value of vsnprintf()... Yes.

=== ztest45646.c ===
#define ZLIB_INTERNAL __attribute__((visibility ("hidden")))
int ZLIB_INTERNAL foo;
int main()
{
  return 0;
}
===
cc -c -O2 -pipe ztest45646.c
Checking for attribute(visibility) support... Yes.

ALL = static shared
AR = libtool
ARFLAGS = -o
CC = cc
CFLAGS = -O2 -pipe -DHAVE_HIDDEN
CPP = cc -E
EXE =
LDCONFIG = ldconfig
LDFLAGS =
LDSHARED = cc -dynamiclib -install_name ${exec_prefix}/lib/libz.1.dylib -compatibility_version 1 -current_version 1.2.11
LDSHAREDLIBC = -lc
OBJC = $(OBJZ) $(OBJG)
PIC_OBJC = $(PIC_OBJZ) $(PIC_OBJG)
RANLIB = ranlib
SFLAGS = -O2 -pipe -fPIC -DHAVE_HIDDEN
SHAREDLIB = libz.dylib
SHAREDLIBM = libz.1.dylib
SHAREDLIBV = libz.1.2.11.dylib
STATICLIB = libz.a
TEST = all teststatic testshared
VER = 1.2.11
Z_U4 =
SRCDIR =
exec_prefix = ${prefix}
includedir = ${prefix}/include
libdir = ${exec_prefix}/lib
mandir = ${prefix}/share/man
prefix = /usr/local
sharedlibdir = ${libdir}
uname = Darwin
--------------------


